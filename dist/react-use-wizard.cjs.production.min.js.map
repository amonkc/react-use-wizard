{"version":3,"file":"react-use-wizard.cjs.production.min.js","sources":["../src/wizardContext.ts","../src/wizard.tsx","../src/useWizard.ts"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport { WizardValues } from './types';\r\n\r\nconst WizardContext = React.createContext<WizardValues | null>(null);\r\n\r\nif (__DEV__) {\r\n  WizardContext.displayName = 'WizardContext';\r\n}\r\n\r\nexport default WizardContext;\r\n","import * as React from 'react';\r\n\r\nimport * as logger from './logger';\r\nimport { Handler, WizardProps } from './types';\r\nimport WizardContext from './wizardContext';\r\n\r\nconst Wizard: React.FC<React.PropsWithChildren<WizardProps>> = React.memo(\r\n  ({\r\n    header,\r\n    footer,\r\n    children,\r\n    onStepChange,\r\n    wrapper: Wrapper,\r\n    startIndex = 0,\r\n  }) => {\r\n    const [activeStep, setActiveStep] = React.useState(startIndex);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const hasNextStep = React.useRef(true);\r\n    const hasPreviousStep = React.useRef(false);\r\n    const nextStepHandler = React.useRef<Handler>(() => {});\r\n    const stepCount = React.Children.toArray(children).length;\r\n\r\n    hasNextStep.current = activeStep < stepCount - 1;\r\n    hasPreviousStep.current = activeStep > 0;\r\n\r\n    const goToNextStep = React.useCallback(() => {\r\n      if (hasNextStep.current) {\r\n        const newActiveStepIndex = activeStep + 1;\r\n\r\n        setActiveStep(newActiveStepIndex);\r\n        onStepChange?.(newActiveStepIndex);\r\n      }\r\n    }, [activeStep, onStepChange]);\r\n\r\n    const goToPreviousStep = React.useCallback(() => {\r\n      if (hasPreviousStep.current) {\r\n        nextStepHandler.current = null;\r\n        const newActiveStepIndex = activeStep - 1;\r\n\r\n        setActiveStep(newActiveStepIndex);\r\n        onStepChange?.(newActiveStepIndex);\r\n      }\r\n    }, [activeStep, onStepChange]);\r\n\r\n    const goToStep = React.useCallback(\r\n      (stepIndex: number) => {\r\n        if (stepIndex >= 0 && stepIndex < stepCount) {\r\n          nextStepHandler.current = null;\r\n          setActiveStep(stepIndex);\r\n          onStepChange?.(stepIndex);\r\n        } else {\r\n          if (__DEV__) {\r\n            logger.log(\r\n              'warn',\r\n              [\r\n                `Invalid step index [${stepIndex}] passed to 'goToStep'. `,\r\n                `Ensure the given stepIndex is not out of boundaries.`,\r\n              ].join(''),\r\n            );\r\n          }\r\n        }\r\n      },\r\n      [stepCount, onStepChange],\r\n    );\r\n\r\n    // Callback to attach the step handler\r\n    const handleStep = React.useRef((handler: Handler) => {\r\n      nextStepHandler.current = handler;\r\n    });\r\n\r\n    const doNextStep = React.useCallback(async () => {\r\n      if (hasNextStep.current && nextStepHandler.current) {\r\n        try {\r\n          setIsLoading(true);\r\n          await nextStepHandler.current();\r\n          setIsLoading(false);\r\n          nextStepHandler.current = null;\r\n          goToNextStep();\r\n        } catch (error) {\r\n          setIsLoading(false);\r\n          throw error;\r\n        }\r\n      } else {\r\n        goToNextStep();\r\n      }\r\n    }, [goToNextStep]);\r\n\r\n    const wizardValue = React.useMemo(\r\n      () => ({\r\n        nextStep: doNextStep,\r\n        previousStep: goToPreviousStep,\r\n        handleStep: handleStep.current,\r\n        isLoading,\r\n        activeStep,\r\n        stepCount,\r\n        isFirstStep: !hasPreviousStep.current,\r\n        isLastStep: !hasNextStep.current,\r\n        goToStep,\r\n      }),\r\n      [\r\n        doNextStep,\r\n        goToPreviousStep,\r\n        isLoading,\r\n        activeStep,\r\n        stepCount,\r\n        goToStep,\r\n      ],\r\n    );\r\n\r\n    const activeStepContent = React.useMemo(() => {\r\n      const reactChildren = React.Children.toArray(children);\r\n\r\n      if (__DEV__) {\r\n        // No steps passed\r\n        if (reactChildren.length === 0) {\r\n          logger.log(\r\n            'warn',\r\n            'Make sure to pass your steps as children in your <Wizard>',\r\n          );\r\n        }\r\n        // The passed start index is invalid\r\n        if (activeStep > reactChildren.length) {\r\n          logger.log('warn', 'An invalid startIndex is passed to <Wizard>');\r\n        }\r\n      }\r\n\r\n      return reactChildren[activeStep];\r\n    }, [activeStep, children]);\r\n\r\n    const enhancedActiveStepContent = React.useMemo(\r\n      () =>\r\n        Wrapper\r\n          ? React.cloneElement(Wrapper, { children: activeStepContent })\r\n          : activeStepContent,\r\n      [Wrapper, activeStepContent],\r\n    );\r\n\r\n    return (\r\n      <WizardContext.Provider value={wizardValue}>\r\n        {header\r\n          ? header({\r\n              activeStep: wizardValue.activeStep,\r\n              stepCount: wizardValue.stepCount,\r\n            })\r\n          : null}\r\n        {enhancedActiveStepContent}\r\n        {footer\r\n          ? footer({\r\n              activeStep: wizardValue.activeStep,\r\n              stepCount: wizardValue.stepCount,\r\n            })\r\n          : null}\r\n      </WizardContext.Provider>\r\n    );\r\n  },\r\n);\r\n\r\nexport default Wizard;\r\n","import * as React from 'react';\r\n\r\nimport { WizardValues } from './types';\r\nimport WizardContext from './wizardContext';\r\n\r\nconst useWizard = () => {\r\n  const context = React.useContext(WizardContext);\r\n\r\n  if (!context && __DEV__) {\r\n    throw Error('Wrap your step with `Wizard`');\r\n  } else {\r\n    return context as WizardValues;\r\n  }\r\n};\r\n\r\nexport default useWizard;\r\n"],"names":["WizardContext","React","header","footer","children","onStepChange","wrapper","Wrapper","startIndex","activeStep","setActiveStep","isLoading","setIsLoading","hasNextStep","hasPreviousStep","nextStepHandler","stepCount","toArray","length","current","goToNextStep","newActiveStepIndex","goToPreviousStep","goToStep","stepIndex","handleStep","handler","doNextStep","async","error","wizardValue","nextStep","previousStep","isFirstStep","isLastStep","activeStepContent","enhancedActiveStepContent","Provider","value"],"mappings":"2FAIA,MAAMA,EAAgBC,gBAAyC,qBCEAA,OAC7D,EACEC,OAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAC,QAASC,EACTC,WAAAA,EAAa,YAENC,EAAYC,GAAiBT,WAAeO,IAC5CG,EAAWC,GAAgBX,YAAe,GAC3CY,EAAcZ,UAAa,GAC3Ba,EAAkBb,UAAa,GAC/Bc,EAAkBd,SAAsB,QACxCe,EAAYf,WAAegB,QAAQb,GAAUc,OAEnDL,EAAYM,QAAUV,EAAaO,EAAY,EAC/CF,EAAgBK,QAAUV,EAAa,QAEjCW,EAAenB,cAAkB,QACjCY,EAAYM,QAAS,OACjBE,EAAqBZ,EAAa,EAExCC,EAAcW,SACdhB,GAAAA,EAAegB,KAEhB,CAACZ,EAAYJ,IAEViB,EAAmBrB,cAAkB,QACrCa,EAAgBK,QAAS,CAC3BJ,EAAgBI,QAAU,WACpBE,EAAqBZ,EAAa,EAExCC,EAAcW,SACdhB,GAAAA,EAAegB,KAEhB,CAACZ,EAAYJ,IAEVkB,EAAWtB,cACduB,IACKA,GAAa,GAAKA,EAAYR,IAChCD,EAAgBI,QAAU,KAC1BT,EAAcc,SACdnB,GAAAA,EAAemB,KAanB,CAACR,EAAWX,IAIRoB,EAAaxB,SAAcyB,IAC/BX,EAAgBI,QAAUO,IAGtBC,EAAa1B,cAAkB2B,aAC/Bf,EAAYM,SAAWJ,EAAgBI,YAEvCP,GAAa,SACPG,EAAgBI,UACtBP,GAAa,GACbG,EAAgBI,QAAU,KAC1BC,IACA,MAAOS,SACPjB,GAAa,GACPiB,OAGRT,KAED,CAACA,IAEEU,EAAc7B,UAClB,MACE8B,SAAUJ,EACVK,aAAcV,EACdG,WAAYA,EAAWN,QACvBR,UAAAA,EACAF,WAAAA,EACAO,UAAAA,EACAiB,aAAcnB,EAAgBK,QAC9Be,YAAarB,EAAYM,QACzBI,SAAAA,IAEF,CACEI,EACAL,EACAX,EACAF,EACAO,EACAO,IAIEY,EAAoBlC,UAAc,IAChBA,WAAegB,QAAQb,GAgBxBK,GACpB,CAACA,EAAYL,IAEVgC,EAA4BnC,UAChC,IACEM,EACIN,eAAmBM,EAAS,CAAEH,SAAU+B,IACxCA,EACN,CAAC5B,EAAS4B,WAIVlC,gBAACD,EAAcqC,UAASC,MAAOR,GAC5B5B,EACGA,EAAO,CACLO,WAAYqB,EAAYrB,WACxBO,UAAWc,EAAYd,YAEzB,KACHoB,EACAjC,EACGA,EAAO,CACLM,WAAYqB,EAAYrB,WACxBO,UAAWc,EAAYd,YAEzB,0BClJM,IACAf,aAAiBD"}